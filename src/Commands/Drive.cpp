// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Drive.h"

Drive::Drive() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::driveTrain);
	Requires(Robot::loopCount);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

// Called just before this Command runs the first time
void Drive::Initialize() {
	
}

// Called repeatedly when this Command is scheduled to run
void Drive::Execute() {
	Robot::driveTrain->DriveJoysticks(Robot::oi->getLeftStick(), Robot::oi->getRightStick());

	/*
	if(Robot::oi->getLeftStick()->GetRawButton(true)){
		Robot::loopCount->magleft = Robot::oi->getLeftStick()->GetMagnitude();
	    Robot::loopCount->xleft = Robot::oi->getLeftStick()->GetX();
	    Robot::loopCount->yleft = Robot::oi->getLeftStick()->GetY();
        Robot::loopCount->left = Robot::loopCount->xleft + Robot::loopCount->yleft;
	    Robot::loopCount->magright = Robot::oi->getRightStick()->GetMagnitude();
	    Robot::loopCount->xright = Robot::oi->getRightStick()->GetX();
	    Robot::loopCount->yright = Robot::oi->getRightStick()->GetY();
	    Robot::loopCount->right = Robot::loopCount->xright + Robot::loopCount->yright;
	    Robot::loopCount->origin = Robot::loopCount->left + Robot::loopCount->right;
        Robot::loopCount->axis = Robot::loopCount->origin/4;
	    Robot::loopCount->magforce = Robot::loopCount->magleft + Robot::loopCount->magright;
	    Robot::loopCount->mag = Robot::loopCount->magforce/2;
	    Robot::loopCount->WriteToFile();
	}
	*/

}

// Make this return true when this Command no longer needs to run execute()
bool Drive::IsFinished() {
	return false;
}

// Called once after isFinished returns true
void Drive::End() {
	
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void Drive::Interrupted() {

}
